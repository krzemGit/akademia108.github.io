{"version":3,"sources":["components/Display.js","components/ButtonsPanel.js","components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","this","counterValue","Component","ButtonsPanel","counterIncrement","increment","counterReset","reset","counterIncremency","Step","_inputStep","value","incrementStep","onClick","class","type","placeholder","ref","data","onChange","Counter","parentIncrementStep","setState","parseFloat","alert","parentIncrementCounter","prevState","state","incremency","parentResetCounter","App","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAkBeA,E,YAdX,WAAYC,GAAQ,qEACVA,I,sEAIN,OACI,yBAAKC,UAAU,WAAf,iBAEA,0BAAMA,UAAU,gBAAhB,IAAiCC,KAAKF,MAAMG,mB,GATlCC,aC8BPC,G,kBA5BX,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KAGVM,iBAAmB,WACf,EAAKN,MAAMO,aALI,EAQnBC,aAAe,WACX,EAAKR,MAAMS,SATI,EAYnBC,kBAAoB,WAChB,IAAIC,EAAO,EAAKC,WAAWC,MAC3B,EAAKb,MAAMc,cAAcH,IAdV,E,sEAiBT,IAAD,OACL,OACI,yBAAKV,UAAU,gBACX,4BAAQc,QAASb,KAAKI,kBAAtB,2CACA,4BAAQS,QAASb,KAAKM,cAAtB,WACA,yBAAKQ,MAAM,cAAX,qCAA4C,2BAAOC,KAAK,SAASD,MAAM,aAAaE,YAAY,IAAIC,IAAK,SAACC,GAAW,EAAKR,WAAaQ,GAAQC,SAAUnB,KAAKQ,0B,GAvBnJN,cCyDZkB,G,kBAjDX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KAQVuB,oBAAsB,SAACZ,GACnB,EAAKa,SAAS,WACV,GAAIb,EAAO,EACP,MAAO,CACH,WAAcc,WAAWd,IAI7Be,MAAM,2FAjBC,EAuBnBC,uBAAyB,WACrB,EAAKH,SAAS,SAACI,GACX,MAAO,CACH,aAAgBA,EAAUzB,aAAe,EAAK0B,MAAMC,eA1B7C,EA+BnBC,mBAAqB,WACjB,EAAKP,SAAS,SAACI,GACX,MAAO,CACH,aAAgB,MA/BxB,EAAKC,MAAQ,CACT,aAAgB,EAChB,WAAc,GALH,E,sEAwCf,OACI,yBAAK5B,UAAU,iBACX,kBAAC,EAAD,CAASE,aAAcD,KAAK2B,MAAM1B,eAClC,kBAAC,EAAD,CAAcI,UAAWL,KAAKyB,uBAAwBlB,MAAOP,KAAK6B,mBAAoBjB,cAAeZ,KAAKqB,2B,GA5CpGnB,c,MCKP4B,MAZf,WACE,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,yBAAKgC,GAAG,eAAR,4BAEF,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0f14c1e2.chunk.js","sourcesContent":["// odpowiada za element pokazujący liczbę\r\nimport React, { Component } from 'react';  //drugim sposobem \r\n\r\nclass Display extends Component {   // krócej niż w poprzednim projekcie, bo pobraliśmy także komponenty\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='display'>\r\n                Stan licznika:\r\n            <span className='display__val'> {this.props.counterValue}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","// odpowiada za buttony i akcje \r\nimport React, { Component } from 'react';\r\nimport './ButtonsPanel.css'\r\n\r\nclass ButtonsPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    counterIncrement = () => {\r\n        this.props.increment();\r\n    }\r\n\r\n    counterReset = () => {\r\n        this.props.reset();\r\n    }\r\n\r\n    counterIncremency = () => {\r\n        let Step = this._inputStep.value\r\n        this.props.incrementStep(Step)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='button-panel'>\r\n                <button onClick={this.counterIncrement}>Zwiększ wartość licznika</button>\r\n                <button onClick={this.counterReset}>Resetuj</button>\r\n                <div class=\"incremency\" >Zwiększ wartość o: <input type=\"number\" class=\"incremency\" placeholder=\"1\" ref={(data) => { this._inputStep = data }} onChange={this.counterIncremency} /></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonsPanel","// odpowiada za całość - wygląd licznika - zewnętrzny div\r\nimport React, { Component } from 'react';\r\n// components\r\nimport Display from './Display';\r\nimport ButtonsPanel from './ButtonsPanel'\r\n\r\n//css\r\nimport './Counter.css';\r\n\r\n\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            'counterValue': 0,\r\n            'incremency': 1\r\n        }\r\n    }\r\n\r\n    parentIncrementStep = (Step) => {\r\n        this.setState(() => {\r\n            if (Step > 0) {\r\n                return {\r\n                    'incremency': parseFloat(Step)\r\n                }\r\n            }\r\n            else {\r\n                alert(\"Zawartość można zwiększyć tylko o liczbę dodatnią\")\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    parentIncrementCounter = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                'counterValue': prevState.counterValue + this.state.incremency\r\n            }\r\n        })\r\n    }\r\n\r\n    parentResetCounter = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                'counterValue': 0\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='counter-panel'>\r\n                <Display counterValue={this.state.counterValue} />\r\n                <ButtonsPanel increment={this.parentIncrementCounter} reset={this.parentResetCounter} incrementStep={this.parentIncrementStep} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter","import React from 'react';\nimport Counter from './components/Counter'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Counter</h1>\n        <div id=\"credentials\">by Lech Krzemiński</div>\n      </header>\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}